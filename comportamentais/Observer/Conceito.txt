PROBLEMA
Em muitos sistemas, é necessário que vários objetos sejam informados automaticamente quando o estado de outro objeto muda.
Por exemplo, em uma aplicação de notícias, sempre que uma nova notícia é publicada, vários assinantes (usuários, apps, serviços) precisam ser notificados.
Se o objeto principal (a fonte) tivesse que conhecer e atualizar manualmente todos os dependentes, o código ficaria fortemente acoplado, difícil de manter e de expandir.

SOLUÇÃO
O padrão Observer resolve esse problema definindo uma relação de dependência um-para-muitos entre objetos.
Um Subject (Sujeito) mantém uma lista de Observers (Observadores) e, sempre que seu estado muda, notifica todos automaticamente.
Cada observador decide como reagir à notificação, sem que o sujeito precise saber detalhes sobre eles.
Assim, o padrão promove baixo acoplamento e facilita a extensibilidade do sistema.

IMPLEMENTAÇÃO
A implementação típica do Observer envolve:
1. Subject (Sujeito) — mantém uma lista de observadores e fornece métodos para adicionar, remover e notificar.
2. Observer (Observador) — define uma interface com o método update(), chamado quando há mudanças no sujeito.
3. ConcreteSubject e ConcreteObserver — implementam o comportamento específico de notificação e reação.